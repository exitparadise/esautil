#!/usr/bin/env python
#
# https://github.com/exitparadise/esautil.git
# code@mailshaft.com
# 

import argparse, json, os, sys, re, copy, time
from datetime import datetime
import elasticagent

# verify ssl connections. 
#    set to 'false' if you are using self-signed certs on your elastic/kibana endpoints
SSL_VERIFY=False

# list of your namespaces
SPACES = ('default','prod','dev')

API_KEY=os.getenv('ELASTIC_API_KEY')

# stock templates are marked as fleet managed. set this to any text value
#   if you want custom templates to be unmanaged.
UNMANAGER="exitparadise"

ELASTIC_HOST="elastic-api:9200"
KIBANA_HOST="kibana-api:5601"

parser = argparse.ArgumentParser(description="Elastic Agent Management Utility")
subparsers = parser.add_subparsers(dest="cmd")

parser_task = subparsers.add_parser("task", help="task actions")
parser_task.add_argument("action", choices=["list","details","cancel","watch"])
parser_task.add_argument("object", nargs='?', help="task id")
parser_task.add_argument("-w","--watch", nargs=1, type=int, action='store', help="when action is 'watch', use this interval")

parser_index = subparsers.add_parser("index", help="index actions")
parser_index.add_argument("action", choices=["details","create","rmalias","reindex","update"])
parser_index.add_argument("object", help="the index name")
parser_index.add_argument("target", nargs="?", help="the index name")
parser_index.add_argument("-a","--alias", action='store', nargs=1, help="when action is 'create', add this as an alias")
parser_index.add_argument("-l","--lifecycle_policy", nargs=1, help="when action is 'update', attach policy to this index. 'none' means remove policy")
parser_index.add_argument("-w","--watch", nargs=1, type=int, action='store', help="when action is 'reindex', go into 'watch' mode and exit when complete")

parser_template = subparsers.add_parser("template", help="index template actions")
parser_template.add_argument("action", choices=["list","json","init","details","update","createfromgeneric","copy"])
parser_template.add_argument("object", help="the namespace or index template")
parser_template.add_argument("dest", nargs='?', help="when copy, the name to copy to")
parser_template.add_argument("-p", "--pattern", nargs=1, help="when action is 'update' or 'copy', set patterns to this comma delineated list")
parser_template.add_argument("-o", "--prio", nargs=1, type=int, help="when action is 'update' or 'copy', set priority to this")
parser_template.add_argument("-c", "--component", nargs=2, help="when action is 'update', add/remove component: <a|add|r|rm|remove> <component>")
parser_template.add_argument("-l", "--lifecycle_policy", nargs=1, help="when action is 'update', add this policy. 'none' means remove policy")
parser_template.add_argument("-d", "--retention-days", nargs=1, type=int, help="when action is 'init' or 'update', number of retention days to apply")
parser_template.add_argument("-n", "--namespace", nargs=1, help="when action is 'createfromgeneric', use this namespace")
parser_template.add_argument("-r", "--rollover-alias", nargs=1, help="when actions is 'copy' or 'update', use this as rollover_index")

parser_agent = subparsers.add_parser("agent", help="agent policy actions")
parser_agent.add_argument("action", choices=["list","details","update","copy","json"])
parser_agent.add_argument("object", nargs="?", help="the namespace or agent policy")
parser_agent.add_argument("dest", nargs="?", help="when action is 'copy', the new agent policy to copy to")
parser_agent.add_argument("-n", "--namespace", help="when action is 'copy' or 'update', the namespace to set")
parser_agent.add_argument("-m", "--name", help="when action is 'update', the name to set")
parser_agent.add_argument("-f", "--full", action="store_true", help="when action is 'json', enable full output")

parser_ds = subparsers.add_parser("ds", help="datastream actions")
parser_ds.add_argument("action", choices=["list","details","json","applyilm","rmindex","addindex"])
parser_ds.add_argument("object", nargs="?", help="the datastream or namespace we would like to target, used with 'list', 'details' and 'applyilm'")
parser_ds.add_argument("target", nargs="?", help="when action is 'rmindex', the index to remove from datastream")
parser_ds.add_argument("-l", "--show-lifecycle", action="store_true")

parser_ilm = subparsers.add_parser("ilm", help="ILM actions")
parser_ilm.add_argument("action", choices=["list","details","json"])
parser_ilm.add_argument("object", nargs="?", help="the ilm policy we would like to target, used with 'details' and 'json'")

parser_lc = subparsers.add_parser("lc", help="lifecycle actions")
parser_lc.add_argument("action", choices=["details","move"])
parser_lc.add_argument("object", help="the index/datastream")
parser_lc.add_argument("target", nargs="?", help="when action is 'move', the phase we would like to move to")

WARN={}

try:
    args = parser.parse_args()
except:
    parser.print_help()
    sys.exit(0)

eapi = elasticagent.apiClient(API_KEY,ELASTIC_HOST,KIBANA_HOST,SSL_VERIFY)

def main():
    if args.cmd == 'index':
        if args.action == 'reindex':
            if args.target:
                payload = { "source": { "index": args.object }, "dest": { "index": args.target } }
                resp = eapi.elasticRequest('POST',"_reindex?wait_for_completion=false",payload)
                try:
                    task = eapi.elasticRequest('GET',f"_tasks/{resp['task']}?human")
                except requests.exceptions.HTTPError:
                    sys.exit(f"no task found with id: {resp['task']}, it must have completed already")
                
                if args.watch and type(args.watch) is list:
                    watch_interval = args.watch[0]
                elif args.watch:
                    watch_interval = args.watch
                else:
                    watch_interval = False
                   
                if watch_interval > 10:
                    task_watch(resp['task'],watch_interval)
                elif watch_interval <= 10 and watch_interval is not False:
                    task_watch(resp['task'],10)
                else:
                    time.sleep(1)
                    print_task(resp['task'],'long',task)
            else:
                sys.exit("reindex requires <object>: a source index, and <target>: a destination index")
        elif args.action == 'create':
            if not args.object or not args.alias:
                sys.exit(f"create requires <object>, an index name and -a <name>, an alias name")
            else:
                if type(args.alias) is list:
                    alias = args.alias[0]
                else: 
                    alias = args.alias

                payload = { "aliases": { f"{alias}": { "is_write_index": True } }, "settings": { "lifecycle": { "rollover_alias": alias } } }
                resp = eapi.elasticRequest('PUT',args.object,payload)
                print(resp)
        elif args.action == 'update':
            if args.lifecycle_policy:
                if type(args.lifecycle_policy) is list:
                    pol = args.lifecycle_policy[0]
                else:
                    pol = args.lifecycle_policy

                payload = { "index.lifecycle.name": pol, "index.lifecycle.prefer_ilm": True }
                resp = eapi.elasticRequest('PUT',f"{args.object}/_settings",payload)
                print(resp)
            else:
                sys.exit("index update needs -a <lifecycle policy>")
        elif args.action == 'rmalias':
            if args.target: 
                payload = { "actions": [ { "remove": { "index": args.object, "alias": args.target } } ] }
                resp = eapi.elasticRequest('POST',"_aliases",payload)
                print(resp)
        elif args.action == 'details':
            resp = eapi.elasticRequest('GET',args.object)
            try:
                resp[args.object]
            except:
                sys.exit(f"{args.object} is not an index")

            stat = eapi.elasticRequest('GET',f"/{args.object}/_stats?human")

            print(f"{args.object}:")
            print(f"  - size: {stat['_all']['primaries']['store']['size']}")
            print(f"  - docs: {stat['_all']['primaries']['docs']['count']}")

            for a in resp[args.object]['aliases']:
                print(f"  - alias: {a}")
            try:
                print(f"  - ilm: {resp[args.object]['settings']['index']['lifecycle']['name']}")
            except:
                print(f"  - ilm: None")
    elif args.cmd == 'task':
        if args.action == 'list':
            tasks = eapi.elasticRequest('GET',f"_tasks?actions=indices:*/reindex&human")
            if tasks['nodes']:
                print("tasks:")
                for node in tasks['nodes']:
                    for task in tasks['nodes'][node]['tasks']:
                        print (f"  - id: {task}")
                        print (f"    action: {tasks['nodes'][node]['tasks'][task]['action']}")
                        print (f"    running_time:{tasks['nodes'][node]['tasks'][task]['running_time']}")
            else:
                print("no reindex tasks running") 
        elif args.action == 'details':
            if args.object:
                try:
                    task = eapi.elasticRequest('GET',f"_tasks/{args.object}?human")
                except requests.exceptions.HTTPError:
                    sys.exit(f"no task found with id: {args.object}")
                
                print_task(args.object,'long',task)
            else:
                sys.exit(f"{args.action} needs an <object>, a task id")
        elif args.action == 'watch':
            if args.watch and type(args.watch) is list:
                watch_interval = args.watch[0]
            elif args.watch:
                watch_interval = args.watch
            else:
                watch_interval = 30
                   
            if watch_interval < 10:
                task_watch(args.object,10)
            else:
                task_watch(args.object,watch_interval)

        elif args.action == 'cancel':
            if args.object:
                resp = eapi.elasticRequest('POST',f"_tasks/{args.object}/_cancel")
                print(resp) 
            else:
                sys.exit(f"{args.action} needs an <object>, a task id")

    elif args.cmd == 'lc':
        if args.action == 'details':
            il = eapi.elasticRequest('GET',f"{args.object}/_ilm/explain")
            print(f"{il['indices'][args.object]['index']}:")
            print(f"  - ilm: {il['indices'][args.object]['policy']}")
            print(f"    phase: {il['indices'][args.object]['phase']}")
            print(f"    action: {il['indices'][args.object]['action']}")
            print(f"    step: {il['indices'][args.object]['step']}")
            if il['indices'][args.object]['step'] == 'ERROR':
                print(f"      ERROR: {il['indices'][args.object]['step_info']['reason']}")
        elif args.action == 'move':
            il = eapi.elasticRequest('GET',f"{args.object}/_ilm/explain")
            phase = il['indices'][args.object]['phase']
            action = il['indices'][args.object]['action']
            name = il['indices'][args.object]['step']

            payload = { "current_step": { "phase": phase, "action": action, "name": name }, "next_step": { "phase": args.target } }
            resp = eapi.elasticRequest('POST',f"_ilm/move/{args.object}",payload)
            print(resp)
        else:
            sys.exit(f"unrecognized lifecycle action: {args.action}")
    elif args.cmd == 'ilm':
        if args.action == 'list':
            ilms = eapi.elasticRequest('GET',f"_ilm/policy")
            for ilm in ilms:
                print(ilm)
        elif args.action in ('details', 'json'):
            try:
                ilms = eapi.elasticRequest('GET',f"_ilm/policy/{args.object}")
            except:
                sys.exit(f"could not find ilm policy: {args.object}")

            if args.action == 'json':
                for ilm in ilms:
                    print(json.dumps(ilms[ilm],indent=1))
            else:
                for ilm in ilms:
                    print(f"ilm_policy: {ilm}")
                    print("  phases:")
                    for p in ilms[ilm]['policy']['phases']:
                        ilm_phase_show(p,ilms[ilm]['policy']['phases'][p])    
                    print("  used_by:")
                    for i in ilms[ilm]['in_use_by']['indices']:
                        print(f"  - index: {i}")
                    for d in ilms[ilm]['in_use_by']['data_streams']:
                        print(f"  - datastream: {d}")
                    for c in ilms[ilm]['in_use_by']['composable_templates']:
                        print(f"  - index_template: {c}")
    elif args.cmd == 'agent':
        if args.action == 'list':
            if args.object in SPACES:
                pol = eapi.kibanaRequest('GET',f"api/fleet/agent_policies?kuery=ingest-agent-policies.namespace:{args.object}")
            else:
                sys.exit("agent list requires <object>, a valid namespace name")
           
            for policy in pol['items']:
                print(f"{policy['name']}:agents={policy['agents']}")
        elif args.action == 'details':
            p = elasticagent.agentPolicy(args.object)
            p.get(eapi)
            p.print_details()
        elif args.action == 'json':
            p = elasticagent.agentPolicy(args.object)
            p.get(eapi)
            p.print_json()
        elif args.action == 'update':
            p = elasticagent.agentPolicy(args.object)
            p.get(eapi)
            changes = 0
            if args.namespace and p.policy['namespace'] != args.namespace: 
                p.update('namespace',args.namespace)
                changes += 1
            if args.name and p.policy['name'] != args.name:
                p.update('name',args.name)
                changes += 1
            if changes:
                print(f"making {changes} changes to {args.object}")
                p.commit_existing_policy(eapi)
            else:
                sys.exit("no changes made")
            
        elif args.action == 'copy':
            if not args.object or not args.namespace or not args.dest:
                sys.exit("copy action requires <object>, an agent policy to copy, <dest>, a name to copy to, and <namespace> the namespace to set in the new policy") 
            else:
                p = elasticagent.agentPolicy(args.object)
                p.get(eapi)

                print(f"copy {p.policy['name']}/{p.policy['id']} to {args.dest}")

                n = copy.deepcopy(p)

                n.update_copy_policy(args.dest,args.namespace)
                n.delete_packages()

                n.commit_new_policy(eapi)
                print(f" - new policy ID: {n.policy['id']}")
               
                already = {}
                for pkg in p.packages:
                    if pkg['package']['name'] not in already:
                        already.setdefault(pkg['package']['name'], 0)
                    already[pkg['package']['name']] += 1

                    for d in ('id','version','updated_at','updated_by','revision','created_at',
                              'created_by','policy_id','policy_ids'):
                         del pkg[d]
                    new_inputs = []
                    for i in pkg['inputs']:
                        new_streams = []
                        for s in i['streams']:
                            del s['id']
                            new_streams.append(s)
                        del i['streams']
                        i['streams'] = new_streams
                        new_inputs.append(i)
                    del pkg['inputs']
                    pkg['inputs'] = new_inputs
                      
                    # mysql integration password can't be copied, so we remove it and prompt user to re-add through UI
                    W = raise_warn(pkg['package']['name'],'mysql','ne','P')
                    if pkg['package']['name'] == 'mysql':
                        del pkg['secret_references']
                        for input in pkg['inputs']:
                            if input['type'] == 'mysql/metrics':
                              input['vars']['password']['value'] = ""
                              for stream in input['streams']:
                                  try:
                                      del stream['compiled_stream'] 
                                  except:
                                      pass

                    res = n.add_package(eapi,pkg,already[pkg['package']['name']])
                    print(f" - add integration: {res['name']}/{res['id']} {W}")
                print("Done!")

        elif args.action == 'json':
            if not args.object:
                sys.exit("json action requires <object>, an agent policy name") 
            else:
                p = eapi.kibanaRequest('GET',f"api/fleet/agent_policies?kuery=ingest-agent-policies.name:{args.object}")
                if args.full:
                    policy = eapi.kibanaRequest('GET',f"api/fleet/agent_policies/{p['items'][0]['id']}/full")
                else:
                    try:
                        policy = eapi.kibanaRequest('GET',f"api/fleet/agent_policies/{p['items'][0]['id']}")
                    except IndexError:
                        sys.exit(f"agent policy: {args.object} does not exist")
                print(json.dumps(policy,indent=1))

    elif args.cmd == 'ds':
        if args.action == 'list':
            if args.object in SPACES:
                resp = eapi.elasticRequest('GET',f"_data_stream/*-{args.object}?expand_wildcards=all")
            elif args.object == 'all':
                resp = eapi.elasticRequest('GET',f"_data_stream?expand_wildcards=all")
            else:
                sys.exit("datastream list requires <object>, a valid namespace or 'all'")

            if len(resp['data_streams']) < 1:
                sys.exit(f"{args.object} is not a datastream or doesn't exist")
            for ds in resp['data_streams']:
               W = raise_warn(args.object,ds['template'],'search','N')
               print(f"{ds['name']} template:{ds['template']} {W}")

        elif args.action == 'details':
            try:
                resp = eapi.elasticRequest('GET',f"_data_stream/{args.object}")
                stat = eapi.elasticRequest('GET',f"/{args.object}/_stats?human")
            except:
                sys.exit(f"could not find datastream: {args.object}")

            for ds in resp['data_streams']:
                W = raise_warn(args.object,ds['template'],'search','N')
                print(f"{ds['name']}:")
                print(f"  - index_template: {ds['template']} {W}")
                try:
                    print(f"  - ilm_policy: {ds['ilm_policy']}")
                except KeyError: 
                    pass
               
                search = { "query": { "match_all": {} }, "size": 1, "sort": [{"@timestamp": {"order": "desc"}}]}
                try:
                    sres = eapi.elasticRequest('POST',f"{ds['name']}/_search",search)
                    print(f"  - last_updated: {sres['hits']['hits'][0]['_source']['event']['ingested']}")
                except: 
                    print(f"  - last_updated: Never")
                try:
                    ds['lifecycle']['enabled']
                    print(f"  - lifecycle:")
                    for i in ('data_retention','effective_retention','retention_determined_by'):
                        print(f"      {i}: {ds['lifecycle'][i]}")
                except:
                    pass
                try:
                    print(f"  - size: {stat['_all']['primaries']['store']['size']}")
                    print(f"  - docs: {stat['_all']['primaries']['docs']['count']}")
                except:
                    pass
                print("  - indices:")
                if args.show_lifecycle:
                    il = eapi.elasticRequest('GET',f"{ds['name']}/_ilm/explain")

                    k = list(il['indices'].keys())
                    k.sort()
                    for id in k:
                        a = elasticagent.ilmDetails(il['indices'][id])
                        try:
                            W2 = raise_warn(ds['ilm_policy'],il['indices'][id]['policy'],'eq','M')
                        except KeyError:
                            try:
                                W2 = raise_warn(ds['ilm_policy'],'None','eq','M')
                            except: 
                                W2 = ''
                        a.print_details(W2)
                else:
                    for index in ds['indices']:
                        try:
                            W2 = raise_warn(ds['ilm_policy'],index['ilm_policy'],'eq','M')
                            print(f"    {index['index_name']} ilm:{index['ilm_policy']} {W2}")
                        except KeyError:
                            print(f"    {index['index_name']}")

        elif args.action == 'json':
            resp = eapi.elasticRequest('GET',f"_data_stream/{args.object}")
            stat = eapi.elasticRequest('GET',f"/{args.object}/_stats?human")
            print(json.dumps(resp,indent=1))
            print(json.dumps(stat,indent=1))
        elif args.action in ('addindex', 'rmindex'):
            if args.target:
                if args.action == 'addindex':
                    payload = { "actions": [ { "add_backing_index": { "data_stream": args.object, "index": args.target } } ] }
                elif args.action == 'rmindex':
                    payload = { "actions": [ { "remove_backing_index": { "data_stream": args.object, "index": args.target } } ] } 
                else: 
                    sys.exit()

                resp = eapi.elasticRequest('POST',f"_data_stream/_modify",payload)
                print(resp)
            else:
                sys.exit("{args.action} requires <target>, an index to add/remove as backing of the named datastream")
        elif args.action == 'applyilm':
            if args.object:
                resp = eapi.elasticRequest('GET',f"_data_stream/{args.object}")
            else:
                sys.exit("applyilm action requires <object>, a datastream name")

            for ds in resp['data_streams']:
               print(f"applying {ds['ilm_policy']} to all indexes in {ds['name']}")
               for index in ds['indices']:
                   if ds['ilm_policy'] == index['ilm_policy']:
                       print(f"{index['index_name']} already has policy {ds['ilm_policy']}, skipping")
                   else:
                       print(f"update {index['index_name']} from {index['ilm_policy']} to {ds['ilm_policy']}")
                       payload = { "index.lifecycle.name": ds['ilm_policy'], "index.lifecycle.prefer_ilm": True }
                       resp = eapi.elasticRequest('PUT',f"{index['index_name']}/_settings",payload)
                       print(resp)
          
    elif args.cmd == 'template':
        if args.action == 'init' and args.object in SPACES:
            template_recreate_from_ds(args.object)
        elif args.action == 'copy':
            try:
                t = elasticagent.indexTemplate(eapi.elasticRequest('GET',f"_index_template/{args.object}"))
            except:
                sys.exit(f"index template '{args.object}' not found")

            if eapi.elasticExists('template',args.dest):
               sys.exit(f"template: {args.dest} already exists. choose a different name")

            if args.pattern:
                t.update_patterns(args.pattern)
            if args.prio:
                t.update_prio(args.prio)
            if args.rollover_alias:
                t.update_ralias(args.rollover_alias)

            t.update_name(args.dest)
            t.unmanage(UNMANAGER)
            res = eapi.elasticRequest('POST',f"_index_template/{t.name}",t.template)
            print(res)
        elif args.action == 'createfromgeneric':
            if not args.object:
               sys.exit("createfromgeneric requires the name of an existing generic template appended with '-<namespace>'")

            if args.dest:
               if not args.namespace:
                   sys.exit("when action is {args.action} and <dest> is specified, you must also include -n <namespace>") 
               else:
                   gen_template = args.dest
                   if type(args.namespace) is list:
                       namespace = args.namespace[0]
                   else:
                       namespace = args.namespace

            else:
                gen_template = re.sub("\-[^-]+$","",args.object)
                n = re.findall("[^-]+$",args.object)
                namespace = n[0]

            new_name = re.sub("\@template","",args.object)
            if eapi.elasticExists('template',new_name):
               sys.exit(f"template: {new_name} already exists. choose a different name")

            try:
                t = elasticagent.indexTemplate(eapi.elasticRequest('GET',f"_index_template/{gen_template}"))
            except:
                sys.exit(f"generic index template '{gen_template}' not found")

            print(f"creating template {new_name} as a copy of {gen_template}")
            t.update_name(new_name)
            ps = t.get_patterns()
            if ps[0] == "metrics-*-*":
                new_pattern =  (f"metrics-*-{namespace}")
                prio = 149
            elif ps[0] == "logs-*-*":
                new_pattern = (f"logs-*-{namespace}")
                prio = 149
            else:
                new_pattern = ps[0].replace("-*",f"-{namespace}*",1)
                prio = 250
            ps[0] = new_pattern
            t.update_patterns(ps)
            t.unmanage(UNMANAGER)
            t.update_prio(prio)

            res = eapi.elasticRequest('POST',f"_index_template/{t.name}",t.template)
            print(res)
        elif args.action == 'json':
            if args.object:
                try:
                    t = elasticagent.indexTemplate(eapi.elasticRequest('GET',f"_index_template/{args.object}"))
                    t.print_json()
                except:
                    sys.exit(f"template not found: {args.object}")
            else:
                sys.exit(f"json action requires <object>, an index template name")
        elif args.action in ('list', 'details'):
            if args.object in SPACES:
                resp = eapi.elasticRequest('GET',f"_index_template/*-{args.object}")
            elif args.action == 'details' and args.object:
                try:
                    resp=eapi.elasticRequest('GET',f"_index_template/{args.object}")
                except:
                    sys.exit("template actions require <object>, a valid namespace or index template name")
            else:
                sys.exit("template actions require <object>, a valid namespace or index template name")

            for t in map(elasticagent.indexTemplate, resp['index_templates']):
               W = raise_warn(args.object, t.name, 'search', 'N')
               print(f"{t.name} {W}")
               if args.action == 'details':
                   t.print_details()

        elif args.action == 'update':
            t = elasticagent.indexTemplate(eapi.elasticRequest('GET',f"_index_template/{args.object}"))
            changes = 0
            if args.component:
                changes += t.update_component(eapi,args.component)
            if args.lifecycle_policy:
                if type(args.lifecycle_policy) is list:
                    if args.lifecycle_policy[0] in ('none','None',0):
                        changes += t.update_ilm_policy(None)
                    else:
                        changes += t.update_ilm_policy(args.lifecycle_policy[0])
                else:
                    if args.lifecycle_policy in ('none','None',0):
                        changes += t.update_ilm_policy(None)
                    else:
                        changes += t.update_ilm_policy(args.lifecycle_policy)
            if args.retention_days == 0 or args.retention_days:
                changes += t.update_retention(args.retention_days)
            if args.prio:
                changes += t.update_prio(args.prio)
            if args.rollover_alias:
                changes += t.update_ralias(args.rollover_alias)
            if args.pattern:
                patterns = []
                for p in args.pattern[0].split(","):
                    patterns.append(p);

                changes += t.update_patterns(patterns)

            if changes:
                res = eapi.elasticRequest('POST',f"_index_template/{args.object}",t.template)
                print(f"updating template {t.name} with {changes} changes")
                print(json.dumps(res,indent=1))
            else:
                print(f"no changes to make for template: {t.name}")

    else:
        parser.print_help()
        sys.exit(1)
    print_warns(WARN)

def task_watch(t,interval):
    while True:
        task = eapi.elasticRequest('GET',f"_tasks/{t}")
        if task.get("completed", False):
            print(f"Reindex task {t} completed")
            break
        else:
            print_task(t,'compact',task)
            sys.stdout.write("\033[F")
            time.sleep(interval)

def print_task(name,f,t):
    try:
        perc = round(t['task']['status']['created'] / t['task']['status']['total'] * 100,1)
    except ZeroDivisionError:
        perc = 0

    if f == 'long':
        if t['completed']: 
            _status = "Complete!"
        else:
            _status = "Running..."
        print(f"task: {name} - {_status}")
        print(f"  - action: {t['task']['action']}")
        print(f"  - description: {t['task']['description']}")
        print(f"  - running_time: {t['task']['running_time']}")
        print(f"    progress:")
        print(f"      -  {t['task']['status']['created']}/{t['task']['status']['total']} {perc}%")
    elif f == 'compact':
        print(f"task: {name} - {perc}% complete")

def ilm_phase_show(P,PHASE):
    print(f"  - {P}:")
    print(f"    min_age: {PHASE['min_age']}")
    print("    actions:")
    for a in PHASE['actions']:
        print(f"      - {a}")

def raise_warn(a,b,action,type):
    _warns = { 
               'N': "[!N] = not using a namespaced template",
               'M': "[!M] = ilm mismatch: index has different policy from datastream",
               'P': "[!P] = unable to copy passwords, edit integration through the UI to re-add"
             }

    if action == 'eq' and a == b:
        return ""
    if action == 'ne' and a != b:
        return ""
    elif action == 'search' and re.search(a, b):
        return ""
    else:
        WARN[type] = _warns[type]
        return f"[!{type}]"

def print_warns(WARNS):
    for w in WARNS:
        print("* " + WARNS[w])
        
def template_recreate_from_ds(NAMESPACE):
    # get list of all data streams in namespace, and the current templates
    # then create new templates specific for that namespace
    action=(f"_data_stream/*-{NAMESPACE}")
    dstreams = eapi.elasticRequest('GET',action)
    for ds in dstreams['data_streams']:
        if "-"+NAMESPACE in ds['template']:
            print(f"Namespaced template {ds['template']} already exists...")
            continue

        resp = eapi.elasticRequest('GET',f"_index_template/{ds['template']}")

        template = resp['index_templates'][0]['index_template']
        template_name = resp['index_templates'][0]['name']
        index_pattern=template['index_patterns'][0]
        
        new_name = (f"{template_name}-{NAMESPACE}") 

        ## replace data in old template definition with new values 
        # we have to deal with generic/catchall templates differently
        # higher prio = pattern will be matched first before a matching pattern in a lower priority template
        if index_pattern == "metrics-*-*":
            new_pattern =  (f"metrics-*-{NAMESPACE}")
            new_prio = template['priority'] + 49
        elif index_pattern == "logs-*-*":
            new_pattern =  (f"logs-*-{NAMESPACE}")
            new_prio = template['priority'] + 49
        else:
            new_pattern =  index_pattern.replace("-*",f"-{NAMESPACE}*",1)
            new_prio = template['priority'] + 50
   
        # add lifecycle policy:  metrics-NAMESPACE or logs-NAMESPACE
        if "metrics" in index_pattern:
            try: 
                template['template']['settings'] = {'index': {'lifecycle': { 'name': 'metrics-'+NAMESPACE } } }
            except KeyError:
                template['template'] = {'settings': {'index': {'lifecycle': { 'name': 'metrics-'+NAMESPACE } } } }
        elif "logs" in index_pattern:
            try:
                template['template']['settings'] = {'index': {'lifecycle': { 'name': 'logs-'+NAMESPACE } } }
            except KeyError:
                template['template'] = {'settings': {'index': {'lifecycle': { 'name': 'logs-'+NAMESPACE } } } }
        else:
            print (f"{index_pattern} doesn't look like a template we can manage")

        # specify data retention in template if desired
        if args.retention_days:
            template['template']['lifecycle'] = { "enabled": "true", "data_retention": str(args.retention_days)+"d" }

        template['index_patterns'][0] = new_pattern
        template['priority'] = new_prio
        template['_meta']['managed_by'] = MANAGER
        template['_meta']['managed'] = False
        resp = eapi.elasticRequest('PUT',f"_index_template/{new_name}",template)
        print(resp)

if __name__ == '__main__':
    main()
